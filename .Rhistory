if (interactive()) {
library(ggplot2)
# single selection
shinyApp(
ui = fluidPage(
varSelectInput("variable", "Variable:", mtcars,multiple = TRUE),
plotOutput("data")
),
server = function(input, output) {
output$data <- renderPlot({
l<-input$variable
print(class(l))
print(length(l))
# ggplot(mtcars, aes(!!input$variable)) + geom_histogram()
})
}
)
}
# Only run examples in interactive R sessions
if (interactive()) {
library(ggplot2)
# single selection
shinyApp(
ui = fluidPage(
varSelectInput("variable", "Variable:", mtcars,multiple = TRUE),
plotOutput("data")
),
server = function(input, output) {
output$data <- renderPlot({
l<-input$variable
print(class(l))
print(length(l))
print(l)
# ggplot(mtcars, aes(!!input$variable)) + geom_histogram()
})
}
)
}
function (inputId, label, data, selected = NULL, multiple = FALSE,
selectize = TRUE, width = NULL, size = NULL)
{
choices <- colnames(data)
selectInputVal <- selectInput(inputId = inputId, label = label,
choices = choices, selected = selected, multiple = multiple,
selectize = selectize, width = width, size = size)
selectClass <- selectInputVal$children[[2]]$children[[1]]$attribs$class
if (is.null(selectClass)) {
newClass <- "symbol"
}
else {
newClass <- paste(selectClass, "symbol", sep = " ")
}
selectInputVal$children[[2]]$children[[1]]$attribs$class <- newClass
selectInputVal
}
## Only run examples in interactive R sessions
if (interactive()) {
library(ggplot2)
# single selection
shinyApp(
ui = fluidPage(
varSelectInput("variable", "Variable:", mtcars,multiple = TRUE),
plotOutput("data")
),
server = function(input, output) {
output$data <- renderPlot({
l<-input$variable
print(class(l))
print(length(l))
print(!!!input$variable)
# ggplot(mtcars, aes(!!input$variable)) + geom_histogram()
})
}
)
}
print(l)
# Only run examples in interactive R sessions
if (interactive()) {
library(ggplot2)
# single selection
shinyApp(
ui = fluidPage(
varSelectInput("variable", "Variable:", mtcars,multiple = TRUE),
plotOutput("data")
),
server = function(input, output) {
output$data <- renderPlot({
l<-input$variable
print(class(l))
print(length(l))
print(l)
# ggplot(mtcars, aes(!!input$variable)) + geom_histogram()
})
}
)
}
## Only run examples in interactive R sessions
if (interactive()) {
library(ggplot2)
# single selection
shinyApp(
ui = fluidPage(
varSelectInput("variable", "Variable:", mtcars,multiple = TRUE),
plotOutput("data")
),
server = function(input, output) {
output$data <- renderPlot({
l<-input$variable
# print(class(l))
# print(length(l))
print(l)
# ggplot(mtcars, aes(!!input$variable)) + geom_histogram()
})
}
)
}
## Only run examples in interactive R sessions
if (interactive()) {
library(ggplot2)
# single selection
shinyApp(
ui = fluidPage(
varSelectInput("variable", "Variable:", mtcars,multiple = TRUE),
plotOutput("data")
),
server = function(input, output) {
output$data <- renderPlot({
l<-input$variable
# print(class(l))
# print(length(l))
print(l[[]])
# ggplot(mtcars, aes(!!input$variable)) + geom_histogram()
})
}
)
}
## Only run examples in interactive R sessions
if (interactive()) {
library(ggplot2)
# single selection
shinyApp(
ui = fluidPage(
varSelectInput("variable", "Variable:", mtcars,multiple = TRUE),
plotOutput("data")
),
server = function(input, output) {
output$data <- renderPlot({
# l<-input$variable
# print(class(l))
# print(length(l))
print(c(input$variable))
# ggplot(mtcars, aes(!!input$variable)) + geom_histogram()
})
}
)
}
## Only run examples in interactive R sessions
if (interactive()) {
library(ggplot2)
# single selection
shinyApp(
ui = fluidPage(
varSelectInput("variable", "Variable:", mtcars,multiple = TRUE),
plotOutput("data")
),
server = function(input, output) {
output$data <- renderPlot({
# l<-input$variable
# print(class(l))
# print(length(l))
print(as.vector(input$variable))
# ggplot(mtcars, aes(!!input$variable)) + geom_histogram()
})
}
)
}
## Only run examples in interactive R sessions
if (interactive()) {
library(ggplot2)
# single selection
shinyApp(
ui = fluidPage(
varSelectInput("variable", "Variable:", mtcars,multiple = TRUE),
plotOutput("data")
),
server = function(input, output) {
output$data <- renderPlot({
# l<-input$variable
# print(class(l))
# print(length(l))
print([[input$variable]])
# ggplot(mtcars, aes(!!input$variable)) + geom_histogram()
})
}
)
}
## Only run examples in interactive R sessions
if (interactive()) {
library(ggplot2)
# single selection
shinyApp(
ui = fluidPage(
varSelectInput("variable", "Variable:", mtcars,multiple = TRUE),
plotOutput("data")
),
server = function(input, output) {
output$data <- renderPlot({
# l<-input$variable
# print(class(l))
# print(length(l))
print([[input$variable]])
# ggplot(mtcars, aes(!!input$variable)) + geom_histogram()
})
}
)
}
Only run examples in interactive R sessions
if (interactive()) {
library(ggplot2)
# single selection
shinyApp(
ui = fluidPage(
varSelectInput("variable", "Variable:", mtcars,multiple = TRUE),
plotOutput("data")
),
server = function(input, output) {
output$data <- renderPlot({
# l<-input$variable
# print(class(l))
# print(length(l))
print(as.vector(input$variable))
# ggplot(mtcars, aes(!!input$variable)) + geom_histogram()
})
}
)
}
## Only run examples in interactive R sessions
if (interactive()) {
library(ggplot2)
# single selection
shinyApp(
ui = fluidPage(
varSelectInput("variable", "Variable:", mtcars,multiple = TRUE),
plotOutput("data")
),
server = function(input, output) {
output$data <- renderPlot({
# l<-input$variable
# print(class(l))
# print(length(l))
print([input$variable])
# ggplot(mtcars, aes(!!input$variable)) + geom_histogram()
})
}
)
}
## Only run examples in interactive R sessions
if (interactive()) {
library(ggplot2)
# single selection
shinyApp(
ui = fluidPage(
varSelectInput("variable", "Variable:", mtcars,multiple = TRUE),
plotOutput("data")
),
server = function(input, output) {
output$data <- renderPlot({
# l<-input$variable
# print(class(l))
# print(length(l))
[input$variable]
# ggplot(mtcars, aes(!!input$variable)) + geom_histogram()
})
}
)
}
[[]]
library(shiny)
ui <- fluidPage(
selectInput("dataset", "select a dataset", choices = c("cars", "mtcars")),
uiOutput("dropdown"),
verbatimTextOutput("head"),
plotOutput("hist")
)
server <- function(input, output) {
data <- reactive({
if(input$dataset == "cars")
cars
else
mtcars
})
output$dropdown <- renderUI({
selectInput("variables", "Select a variable", names(data()))
})
output$head <- renderPrint({
head(data())
})
output$hist <- renderPlot({
hist(data()[[input$variables]])
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
selectInput("dataset", "select a dataset", choices = c("cars", "mtcars")),
uiOutput("dropdown"),
verbatimTextOutput("head"),
dataTableOutput("hist")
)
server <- function(input, output) {
data <- reactive({
if(input$dataset == "cars")
cars
else
mtcars
})
output$dropdown <- renderUI({
selectInput("variables", "Select a variable", names(data()),multiple = TRUE)
})
output$head <- renderPrint({
head(data())
})
output$hist <- renderDataTable({
(data()[[input$variables]])
})
}
shinyApp(ui, server)
## Only run examples in interactive R sessions
if (interactive()) {
library(ggplot2)
# single selection
shinyUI(pageWithSidebar(
headerPanel("CSV Data explorer"),
sidebarPanel(
fileInput('datafile', 'Choose CSV file',
accept=c('text/csv', 'text/comma-separated-values,text/plain')),
uiOutput("varselect"),
br()
),
mainPanel(
dataTableOutput("table")
)
))
shinyServer(function(session,input, output) {
Dataset <- reactive({
infile <- input$datafile
if (is.null(infile)) {
return(NULL)
}
read.csv(infile$datapath)
})
output$varselect <- renderUI({
if (identical(Dataset(), '') || identical(Dataset(),data.frame())) return(NULL)
cols <- names(Dataset())
selectInput("vars", "Select a variable:",choices=cols, selected=cols, multiple=T)
})
output$table <- renderDataTable({
if (is.null(input$vars) || length(input$vars)==0) return(NULL)
return(head(Dataset()[,input$vars,drop=FALSE]))
})
})
}
## Only run examples in interactive R sessions
if (interactive()) {
library(ggplot2)
# single selection
shinyUI(pageWithSidebar(
headerPanel("CSV Data explorer"),
sidebarPanel(
fileInput('datafile', 'Choose CSV file',
accept=c('text/csv', 'text/comma-separated-values,text/plain')),
uiOutput("varselect"),
br()
),
mainPanel(
dataTableOutput("table")
)
)),
shinyServer(function(session,input, output) {
Dataset <- reactive({
infile <- input$datafile
if (is.null(infile)) {
return(NULL)
}
read.csv(infile$datapath)
})
output$varselect <- renderUI({
if (identical(Dataset(), '') || identical(Dataset(),data.frame())) return(NULL)
cols <- names(Dataset())
selectInput("vars", "Select a variable:",choices=cols, selected=cols, multiple=T)
})
output$table <- renderDataTable({
if (is.null(input$vars) || length(input$vars)==0) return(NULL)
return(head(Dataset()[,input$vars,drop=FALSE]))
})
})
}
if (interactive()) {
library(ggplot2)
# single selection
shinyUI(pageWithSidebar(
headerPanel("CSV Data explorer"),
sidebarPanel(
fileInput('datafile', 'Choose CSV file',
accept=c('text/csv', 'text/comma-separated-values,text/plain')),
uiOutput("varselect"),
br()
),
mainPanel(
dataTableOutput("table")
)
)),
shinyServer(function(session,input, output) {
Dataset <- reactive({
infile <- input$datafile
if (is.null(infile)) {
return(NULL)
}
read.csv(infile$datapath)
})
output$varselect <- renderUI({
if (identical(Dataset(), '') || identical(Dataset(),data.frame())) return(NULL)
cols <- names(Dataset())
selectInput("vars", "Select a variable:",choices=cols, selected=cols, multiple=T)
})
output$table <- renderDataTable({
if (is.null(input$vars) || length(input$vars)==0) return(NULL)
return(head(Dataset()[,input$vars,drop=FALSE]))
})
})
## Only run examples in interactive R sessions
if (interactive()) {
library(ggplot2)
# single selection
shinyUI(pageWithSidebar(
headerPanel("CSV Data explorer"),
sidebarPanel(
fileInput('datafile', 'Choose CSV file',
accept=c('text/csv', 'text/comma-separated-values,text/plain')),
uiOutput("varselect"),
br()
),
mainPanel(
dataTableOutput("table")
)
)),
shinyServer(function(session,input, output) {
Dataset <- reactive({
infile <- input$datafile
if (is.null(infile)) {
return(NULL)
}
read.csv(infile$datapath)
})
output$varselect <- renderUI({
if (identical(Dataset(), '') || identical(Dataset(),data.frame())) return(NULL)
cols <- names(Dataset())
selectInput("vars", "Select a variable:",choices=cols, selected=cols, multiple=T)
})
output$table <- renderDataTable({
if (is.null(input$vars) || length(input$vars)==0) return(NULL)
return(head(Dataset()[,input$vars,drop=FALSE]))
})
})
runApp()
runApp()
runApp()
runApp()
runApp()
?identical
runApp()
runApp()
install.packages("shinythemes")
runApp()
runApp()
runApp()
replace("churn.csv")
strsplit("churn.csv",'\.')
strsplit("churn.csv",'/.')
strsplit("churn.csv",'\\.')
strsplit("churn.csv",'\\.')[[1]]
strsplit("churn.csv",'\\.')[[1]][1]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runGitHub("DummyEncoder","yogesh1612",ref = "main")
source("https://raw.githubusercontent.com/yogesh1612/MNIST_ShinyApp/main/dependencies.R")
runGitHub("MNIST_ShinyApp",'yogesh1612',ref = "main")
source("https://raw.githubusercontent.com/yogesh1612/MNIST_ShinyApp/main/keras_dependencies.R")
load_model_hdf5("D://R Projects/MNIST_ShinyApp/mnist_model.h5")
load_model_hdf5("D://R Projects/MNIST_ShinyApp/mnist_model.h5",compile = TRUE)
load_model_hdf5("D://R Projects/MNIST_ShinyApp/mnist_model.h5",compile = FALSE)
library(reticulate)
reticulate::virtualenv_remove(packages="h5py", envname = "r-reticulate") reticulate::virtualenv_install("h5py", version = "2.1.0", envname = "r-reticulate")
reticulate::virtualenv_remove(packages="h5py", envname = "r-reticulate")
n
load_model_hdf5("D://R Projects/MNIST_ShinyApp/mnist_model.h5",compile = FALSE)
source("https://raw.githubusercontent.com/yogesh1612/basic-text-analysis-shinyapp/master/dependency-basic-text-analysis-shinyapp.R")
runGitHub("basic-text-analysis-shinyapp",'yogesh1612')
runGitHub("basic-text-analysis-shinyapp",'yogesh1612')
