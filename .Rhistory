if (!require("purrr")){install.packages("purrr"); library("purrr")}
if (!require("fastDummies")){install.packages("fastDummies"); library("fastDummies")}
require(purrr)
require(fastDummies)
# script func build_dummy_df()
build_dummy_df <- function(factor_colm0){
a2 = fastDummies::dummy_cols(factor_colm0)
a2a = a2[,2:ncol(a2)]
return(a2a) }
# main func convert_df_dummies()
convert_df_dummies <- function(df0){
df01 = as.data.frame(df0, stringsAsFactors = TRUE); str(df01)
# ID nonmetric colms
a0=NULL
a0 = map_dfc(df0, function(x) c(a0, is.numeric(x))); a0
num_factors = sum(as.logical(!a0)*1); num_factors
# do only if there exist nonmetric colms
if (num_factors > 0){
stor_list0 = NULL
a1 = df0[, as.logical(a0)] # %>% head()
a1_nonfac = df0[, !as.logical(a0)];
for (i0 in 1:num_factors){stor_list0[[i0]] = build_dummy_df(a1[,i0])}
for (i0 in 1:length(stor_list0)){a1_nonfac = cbind(a1_nonfac, stor_list0[[i0]])}
} else { a1_nonfac = df0  }
# output & end func
return(a1_nonfac) }
# test-drive on toy dataset
fastDummies_example <- data.frame(numbers = 1:3,
gender  = c("male", "male", "female"),
animals = c("dog", "dog", "cat"),
dates   = as.Date(c("2012-01-01", "2011-12-31",
"2012-01-01")),
stringsAsFactors = TRUE)
df0=fastDummies_example
out0 = convert_df_dummies(fastDummies_example) # 0.03s
# test-drive on toy dataset
fastDummies_example <- data.frame(numbers = 1:3,
gender  = c("male", "male", "female"),
animals = c("dog", "dog", "cat"),
dates   = as.Date(c("2012-01-01", "2011-12-31",
"2012-01-01")),
stringsAsFactors = TRUE)
df0=fastDummies_example
out0 = convert_df_dummies(fastDummies_example) # 0.03s
out0 = convert_df_dummies(fastDummies_example) # 0.03s
dataf <- read.csv('https://vincentarelbundock.github.io/Rdatasets/csv/carData/Salaries.csv')
str(dataf)
str(df0)
dummy_columns(df0)
dummy_columns(df0,remove_selected_columns = TRUE)
dataf <- read.csv('https://vincentarelbundock.github.io/Rdatasets/csv/carData/Salaries.csv')
vignette(fastDummies)
vignette('fastDummies')
?fastDummies
library(fastDummies)
library(data.table)
data=data.frame(A=c(5,2,4),B=c('male','male','female'),C=c(1,3,5))
shinyServer(
function(input, output){
#Select Explanatory Nominal Variables
output$ColumnSelector_dummy <- renderUI({
selectInput("SelectedDummy","Select Nominal Variables (values: male,female)",
choices = as.list(names(data)),multiple=TRUE, selected = NULL)
})
#
df_subset_dummy <- reactive({
a <- subset(data, select = input$SelectedDummy)
return(a)
})
#Convert Nominal variables to Dummy variables
df_subset_dummy_tranformed <- reactive({
df1 <- lapply( df_subset_dummy(), factor)
df2 <- fastDummies::dummy_cols(df1)
drops <- names(df1)
df3 <- df2[, !(names(df2) %in% drops)]
return(df3)
})
#Select Explanatory Ordinal Variables
output$ColumnSelector_ordinal<- renderUI({
selectInput("SelectedOrdinal","Select Ordinal Variables (values: 1,2,3,4,5,6)",
choices = as.list(names(data)), multiple=TRUE,selected = NULL )
})
df_subset_ordinal <- reactive({
a <- subset(data, select = input$SelectedOrdinal)
return(a)
})
#Join Ordinal and Nominal dataframes
df_nominal_ordinal_bind <- reactive({
df <- cbind(df_subset_dummy_tranformed(),df_subset_ordinal())
return(df)
})
output$table_ordinal_nominal <- renderTable(head(df_nominal_ordinal_bind()))
})
shinyUI(
fluidPage(
tabsetPanel(
tabPanel("Data", fluid = TRUE,
sidebarLayout(
sidebarPanel(
uiOutput("ColumnSelector_dummy"),
uiOutput("ColumnSelector_ordinal")
),
mainPanel(
tabsetPanel(
tabPanel('Subsets',
tableOutput('table_ordinal_nominal')
) )) ) ))))
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
upload_data <- function(file){
df <- read.csv(file)
return(df)
}
dataf <- upload_data('https://vincentarelbundock.github.io/Rdatasets/csv/carData/Salaries.csv')
str(df)
str(dataf)
select_numeric_cols <- function(df){
num_df <- df %>% select_if(is.numeric)
return(num_df)
}
data_n <- select_numeric_cols(dataf)
data_c <- select_cat_cols(dataf)
select_cat_cols <- function(df){
cat_df <- df %>% select_if(is.character)
return(cat_df)
}
data_c <- select_cat_cols(dataf)
str(data_n)
str(data_c)
str(dataf)
table(data_n$yrs.service)
install.packages("esquisse")
esquisse:::esquisser()
if (interactive()) {
shinyWidgets::shinyWidgetsGallery()
}
