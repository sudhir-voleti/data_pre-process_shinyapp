# to show that it won't launch a series of reactivity
# invalidation
actionButton("reset", "Reset x")
)
)
}
server <- function(
input,
output,
session
){
# Mimic an R6 class, i.e a non-reactive object
x <- environment()
# Creating two watchers
init("render_result", "render_result2")
observeEvent( input$compute , {
# When the user presses compute, we launch runif()
x$results <- runif(1)
# Every time a new value is stored, we render result
trigger("render_result")
# Only render the second result if x$results is over 0.5
if (x$results > 0.5){
trigger("render_result2")
}
})
output$result <- renderPrint({
# Will be rendered every time
watch("render_result")
# require x$results before rendering the output
req(x$results)
x$results
})
output$result2 <- renderPrint({
# This will only be rendered if trigger("render_result2")
# is called
watch("render_result2")
req(x$results)
x$results
})
observeEvent( input$reset , {
# This resets x$results. This code block is here
# to show that reactivity is not triggered in this app
# unless a trigger() is called
x$results <-  0
print(x$results)
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
headerPanel("Example eventReactive"),
mainPanel(
# input field
textInput("user_text", label = "Enter some text:", placeholder = "Please enter some text."),
# submit button
actionButton("submit", label = "Submit"),
# display text output
textOutput("text"))
)
server <- function(input, output) {
# reactive expression
text_reactive <- eventReactive( input$submit, {
input$user_text
})
# text output
output$text <- renderText({
text_reactive()
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
headerPanel("Example reactive"),
mainPanel(
# action buttons
actionButton("button1","Button 1"),
actionButton("button2","Button 2")
)
)
server <- function(input, output) {
# observe button 1 press.
observe({
input$button1
input$button2
showModal(modalDialog(
title = "Button pressed",
"You pressed one of the buttons!"
))
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
headerPanel("Example reactive"),
mainPanel(
# action buttons
actionButton("button1","Button 1"),
actionButton("button2","Button 2")
)
)
server <- function(input, output) {
# observe button 1 press.
observeEvent(input$button1, {
# The observeEvent takes no dependency on button 2, even though we refer to the input in the following line.
input$button2
showModal(modalDialog(
title = "Button pressed",
"You pressed one of the buttons!"
))
})
}
shinyApp(ui = ui, server = server)
library(descriptr)
ds_launch_shiny_app()
ds_launch_shiny_app()
ds_launch_shiny_app()
runApp()
runApp()
library(descriptr)
system.file()
.libPaths()
shiny::runApp('~/R/win-library/4.0/xplorerr/app-descriptr')
runApp()
runApp()
runApp('~/R/win-library/4.0/xplorerr/app-descriptr')
runApp('~/R/win-library/4.0/xplorerr/app-descriptr')
runApp('D:/R Projects/DummyEncoder')
runApp()
runApp('~/R/win-library/4.0/xplorerr/app-descriptr')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('~/R/win-library/4.0/xplorerr/app-descriptr')
runApp()
runApp()
runApp()
ds_summary_stats(mtcars)
str(mtcars)
str(sleep)
str(diabetes)
ds_summary_stats(diabetes)
runApp('~/R/win-library/4.0/xplorerr/app-descriptr')
runApp()
runApp('~/R/win-library/4.0/xplorerr/app-descriptr')
runApp()
runApp()
ds_summary_stats(mtcars,mpg)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('~/R/win-library/4.0/xplorerr/app-descriptr')
str(diabetes)
ds_freq_table(diabetes,Outcome)
ds_freq_table(diabetes,Glucose)
plot(ds_freq_table(diabetes,Glucose))
runApp('~/R/win-library/4.0/xplorerr/app-descriptr')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('~/R/win-library/4.0/xplorerr/app-descriptr')
runApp('D:/R Projects/DummyEncoder')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('~/R/win-library/4.0/xplorerr/app-descriptr')
runApp('~/R/win-library/4.0/xplorerr/app-descriptr')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
plot_correlation(mtcars_v1, type = "continuous") # for continuous vars
if (!require(DataExplorer)){install.packages("DataExplorer")}; library(DataExplorer)
plot_correlation(mtcars_v1, type = "continuous") # for continuous vars
data(mtcars)
mtcars_v1 = mtcars # create copy for editing
str(mtcars_v1)
plot_correlation(mtcars_v1, type = "continuous") # for continuous vars
runApp()
runApp()
runApp()
?plot_correlation
runApp()
?plot_correlation
runApp()
runApp()
plot_correlation(sleep)
plot_correlation(sleep,geom_text_args = )
runApp()
complete.cases(sleep)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?glyphicon
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp('~/R/win-library/4.0/xplorerr/app-descriptr')
runApp()
runApp()
ds_summary_stats(mtcars)
ds_summary_stats(mtcars)[[1]]
temp <-ds_summary_stats(mtcars)
runApp()
?ds_summary_stats()
runApp()
my_mode <- function(x) {                                     # Create mode function
unique_x <- unique(x)
mode <- unique_x[which.max(tabulate(match(x, unique_x)))]
mode
}
sapply(mtcars, my_mode)
str(sleep)
str(diabetes)
sapply(mtcars, diabetes)
sapply(diabetes, my_mode)
my_mode(diabetes$Outcome)
vec <- factor(c(4, NA, 7, 5, 7, 1, 6, 3, NA, 5, 5))          # Create example vector
my_mode(vec[!is.na(vec)])
my_mode <- function(x) {                                     # Create mode function
unique_x <- unique(x)
mode <- unique_x[which.max(tabulate(match(x, unique_x)))]
x[is.na(x)] <- mode
}
my_mode(vec)
my_mode <- function(x) {                                     # Create mode function
unique_x <- unique(x)
mode <- unique_x[which.max(tabulate(match(x, unique_x)))]
x[is.na(x)] <- mode
return(x)
}
vec <- factor(c(4, NA, 7, 5, 7, 1, 6, 3, NA, 5, 5))          # Create example vector
my_mode(vec)
sapply(diabetes, my_mode)
temp_sleep<-sapply(diabetes, my_mode)
sum(is.na(sleep))
sum(is.na(temp_sleep))
my_mode(diabetes$Outcome)
my_mode(vec)[[1]]
my_mode(vec)[[2]]
my_mode <- function(x) {                                     # Create mode function
unique_x <- unique(x)
mode <- unique_x[which.max(tabulate(match(x, unique_x)))]
x[is.na(x)] <- mode
return(list(x,mode))
}
vec <- factor(c(4, NA, 7, 5, 7, 1, 6, 3, NA, 5, 5))          # Create example vector
my_mode(vec)[[2]]
my_mode(vec)
my_mode(vec)[[1]]
my_mode(vec)[[1]][1]
my_mode(vec)[[1]][[1]]
my_mode(vec)[[1]]
vec_1<-my_mode(vec)[[1]]
vec
vec_1
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
bank_csv <- read.csv("E://Eruditis BA/Module-2 Data Prep/Assignment/bank_csv.csv")
View(bank_csv)
write.csv(bank_csv,"bank_colon.csv",row.names = FALSE,sep=";")
write.csv(bank_csv,"bank_colon.csv",row.names = FALSE,sep = ;)
write.csv(bank_csv,"bank_colon.csv",row.names = FALSE,sep = ";")
write.table(bank_csv,"bank_colon.csv",row.names = FALSE,sep = ";")
runApp()
runApp()
View(bank_csv)
runApp()
runApp()
?ds_freq_table
?freq
?intervals
intervals(mtcars$mpg)
?intervals
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
sapply(bank_csv, my_mode)
my_mode <- function(x) {                                     # Create mode function
unique_x <- unique(x)
mode <- unique_x[which.max(tabulate(match(x, unique_x)))]
x[is.na(x)] <- mode
return(list(x,mode))
}
vec1 <- rnorm(11)
df_vec <- as.data.frame(vec,vec_1)
View(df_vec)
df_vec <- as.data.frame(c(vec,vec_1))
df_vec <- as.data.frame(list(vec,vec_1))
View(df_vec)
names(df_vec) <- c("v1","v2")
View(df_vec)
str(df_vec)
my_mode <- function(x) {                                     # Create mode function
unique_x <- unique(x)
mode <- unique_x[which.max(tabulate(match(x, unique_x)))]
x[is.na(x)] <- mode
return(list(x,mode))
}
my_mode(df_vec)
my_mode(df_vec$v1)
t <- sapply(df[,v1], my_mode)
t <- sapply(df_vec[,v1], my_mode)
View(df_vec)
t <- sapply(df_vec[,'v1'], my_mode)
View(t)
getmode <- function(v){
v=v[nchar(as.character(v))>0]
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
sapply(bank_csv, getmode)
df<- df_vec
for (cols in colnames(df)) {
df<-df%>%mutate(!!cols := replace(!!rlang::sym(cols), !!rlang::sym(cols)=="", getmode(!!rlang::sym(cols))))
}
View(df)
for (cols in colnames(df)) {
print(cols)
df<-df%>%mutate(!!cols := replace(!!rlang::sym(cols), !!rlang::sym(cols)=="", getmode(!!rlang::sym(cols))))
}
cols
df<- df_vec
for (cols in colnames(df)) {
print(cols)
df_1<-df%>%mutate(!!cols := replace(!!rlang::sym(cols), !!rlang::sym(cols)=="", getmode(!!rlang::sym(cols))))
}
View(df_1)
df<-tibble(id=seq(1,10), ColumnA=c(10,9,8,7,NA,NA,20,15,12,NA),
ColumnB=factor(c("A","B","A","A","","B","A","B","","A")),
ColumnC=factor(c("","BB","CC","BB","BB","CC","AA","BB","","AA")),
ColumnD=c(NA,20,18,22,18,17,19,NA,17,23)
)
View(df)
str)df
str(df)
for (cols in colnames(df)) {
print(cols)
df_1<-df%>%mutate(!!cols := replace(!!rlang::sym(cols), !!rlang::sym(cols)=="", getmode(!!rlang::sym(cols))))
}
View(df_1)
View(df)
View(df_1)
for (cols in colnames(df)) {
if (cols %in% names(df[,sapply(df, is.numeric)])) {
df<-df%>%mutate(!!cols := replace(!!rlang::sym(cols), is.na(!!rlang::sym(cols)), mean(!!rlang::sym(cols), na.rm=TRUE)))
}
else {
df<-df%>%mutate(!!cols := replace(!!rlang::sym(cols), !!rlang::sym(cols)=="", getmode(!!rlang::sym(cols))))
}
}
View(df)
df<-tibble(id=seq(1,10), ColumnA=c(10,9,8,7,NA,NA,20,15,12,NA),
ColumnB=factor(c("A","B","A","A","","B","A","B","","A")),
ColumnC=factor(c("","BB","CC","BB","BB","CC","AA","BB","","AA")),
ColumnD=c(NA,20,18,22,18,17,19,NA,17,23)
)
for (cols in colnames(df)) {
if (cols %in% names(df[,sapply(df, is.factor)])) {
df<-df%>%mutate(!!cols := replace(!!rlang::sym(cols), !!rlang::sym(cols)=="", getmode(!!rlang::sym(cols))))
}
}
View(df)
for (cols in colnames(df)) {
if (cols %in% names(df[,sapply(df, is.factor)])) {
getmode(df[,cols])
df<-df%>%mutate(!!cols := replace(!!rlang::sym(cols), !!rlang::sym(cols)=="", getmode(!!rlang::sym(cols))))
}
}
for (cols in colnames(df)) {
if (cols %in% names(df[,sapply(df, is.factor)])) {
print(getmode(df[,cols]))
df<-df%>%mutate(!!cols := replace(!!rlang::sym(cols), !!rlang::sym(cols)=="", getmode(!!rlang::sym(cols))))
}
}
View(df)
sym(cols)
!!rlang::sym(cols)
my_mode <- function(x) {                                     # Create mode function
unique_x <- unique(x)
mode <- unique_x[which.max(tabulate(match(x, unique_x)))]
# x[is.na(x)] <- mode
return(mode)
}
df[is.na(df)]
df[,cols][is.na(df[,cols])]
df<-tibble(id=seq(1,10), ColumnA=c(10,9,8,7,NA,NA,20,15,12,NA),
ColumnB=factor(c("A","B","A","A","","B","A","B","","A")),
ColumnC=factor(c("","BB","CC","BB","BB","CC","AA","BB","","AA")),
ColumnD=c(NA,20,18,22,18,17,19,NA,17,23)
)
for (cols in colnames(df)) {
if (cols %in% names(df[,sapply(df, is.factor)])) {
mode <- my_mode(df[,cols])
df[,cols][is.na(df[,cols])] <- mode                        # Impute by mode
#df<-df%>%mutate(!!cols := replace(!!rlang::sym(cols), !!rlang::sym(cols)=="", getmode(!!rlang::sym(cols))))
}
}
for (cols in colnames(df)) {
if (cols %in% names(df[,sapply(df, is.factor)])) {
mode <- my_mode(df[,cols])
# df[,cols][is.na(df[,cols])] <- mode  # Impute by mode
df$cols[is.na(df$cols)]<-mode
#df<-df%>%mutate(!!cols := replace(!!rlang::sym(cols), !!rlang::sym(cols)=="", getmode(!!rlang::sym(cols))))
}
}
df[is.na(df[,cols]),cols]
df<-tibble(id=seq(1,10), ColumnA=c(10,9,8,7,NA,NA,20,15,12,NA),
ColumnB=factor(c("A","B","A","A","","B","A","B","","A")),
ColumnC=factor(c("","BB","CC","BB","BB","CC","AA","BB","","AA")),
ColumnD=c(NA,20,18,22,18,17,19,NA,17,23)
)
for (cols in colnames(df)) {
if (cols %in% names(df[,sapply(df, is.factor)])) {
mode <- my_mode(df[,cols])
df[is.na(data[,cols]),cols] <- mode
}
}
for (cols in colnames(df)) {
if (cols %in% names(df[,sapply(df, is.factor)])) {
mode <- my_mode(df[,cols])
df[is.na(df[,cols]),cols] <- mode
}
}
df[is.na(df[,cols]),cols]
View(df)
mode
my_mode(df[,cols])
my_mode(df$ColumnC)
my_mode(df$ColumnA)
my_mode(df$ColumnD)
my_mode(df$ColumnB)
df<-tibble(id=seq(1,10), ColumnA=c(10,9,8,7,NA,NA,20,15,12,NA),
ColumnB=factor(c("A","B","A","A","","B","A","B","","A")),
ColumnC=factor(c("","BB","CC","BB","BB","CC","AA","BB","","AA")),
ColumnD=c(NA,20,18,22,18,17,19,NA,17,23)
)
for (cols in colnames(df)) {
if (cols %in% names(df[,sapply(df, is.factor)])) {
df_1<-df%>%mutate(!!cols := replace(!!rlang::sym(cols), !!rlang::sym(cols)=="", getmode(!!rlang::sym(cols))))
}
}
View(df_1)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
library(shinyBS)
runApp()
runApp()
library(stringr)
runApp()
source("https://raw.githubusercontent.com/yogesh1612/DummyEncoder/main/dependencies.R")
runGitHub("DummyEncoder","yogesh1612","main")
runApp()
runApp()
runApp()
runApp()
